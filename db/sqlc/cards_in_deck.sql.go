// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: cards_in_deck.sql

package db

import (
	"context"
)

const addCardToDeck = `-- name: AddCardToDeck :one
INSERT INTO cards_in_deck (
    id,
    card_id,
    deck_id,
    card_count
) VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING id, card_id, deck_id, card_count
`

type AddCardToDeckParams struct {
	ID        int64 `json:"id"`
	CardID    int64 `json:"card_id"`
	DeckID    int64 `json:"deck_id"`
	CardCount int32 `json:"card_count"`
}

func (q *Queries) AddCardToDeck(ctx context.Context, arg AddCardToDeckParams) (CardsInDeck, error) {
	row := q.db.QueryRowContext(ctx, addCardToDeck,
		arg.ID,
		arg.CardID,
		arg.DeckID,
		arg.CardCount,
	)
	var i CardsInDeck
	err := row.Scan(
		&i.ID,
		&i.CardID,
		&i.DeckID,
		&i.CardCount,
	)
	return i, err
}

const countCardInDeck = `-- name: CountCardInDeck :one
SELECT card_count FROM cards_in_deck
WHERE card_id = $1 AND deck_id = $2
`

type CountCardInDeckParams struct {
	CardID int64 `json:"card_id"`
	DeckID int64 `json:"deck_id"`
}

func (q *Queries) CountCardInDeck(ctx context.Context, arg CountCardInDeckParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, countCardInDeck, arg.CardID, arg.DeckID)
	var card_count int32
	err := row.Scan(&card_count)
	return card_count, err
}

const deleteAllCardsFromDeck = `-- name: DeleteAllCardsFromDeck :exec
DELETE FROM cards_in_deck
WHERE deck_id = $1
`

func (q *Queries) DeleteAllCardsFromDeck(ctx context.Context, deckID int64) error {
	_, err := q.db.ExecContext(ctx, deleteAllCardsFromDeck, deckID)
	return err
}

const deleteAllDecksFromCard = `-- name: DeleteAllDecksFromCard :exec
DELETE FROM cards_in_deck
WHERE card_id = $1
`

func (q *Queries) DeleteAllDecksFromCard(ctx context.Context, cardID int64) error {
	_, err := q.db.ExecContext(ctx, deleteAllDecksFromCard, cardID)
	return err
}

const deleteCardFromDeck = `-- name: DeleteCardFromDeck :exec
DELETE FROM cards_in_deck
WHERE card_id = $1 AND deck_id = $2
`

type DeleteCardFromDeckParams struct {
	CardID int64 `json:"card_id"`
	DeckID int64 `json:"deck_id"`
}

func (q *Queries) DeleteCardFromDeck(ctx context.Context, arg DeleteCardFromDeckParams) error {
	_, err := q.db.ExecContext(ctx, deleteCardFromDeck, arg.CardID, arg.DeckID)
	return err
}

const getCardsFromDeck = `-- name: GetCardsFromDeck :many
SELECT id, card_id, deck_id, card_count FROM cards_in_deck
WHERE deck_id = $1
`

func (q *Queries) GetCardsFromDeck(ctx context.Context, deckID int64) ([]CardsInDeck, error) {
	rows, err := q.db.QueryContext(ctx, getCardsFromDeck, deckID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CardsInDeck{}
	for rows.Next() {
		var i CardsInDeck
		if err := rows.Scan(
			&i.ID,
			&i.CardID,
			&i.DeckID,
			&i.CardCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDecksFromCard = `-- name: GetDecksFromCard :many
SELECT id, card_id, deck_id, card_count FROM cards_in_deck
WHERE card_id = $1
`

func (q *Queries) GetDecksFromCard(ctx context.Context, cardID int64) ([]CardsInDeck, error) {
	rows, err := q.db.QueryContext(ctx, getDecksFromCard, cardID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CardsInDeck{}
	for rows.Next() {
		var i CardsInDeck
		if err := rows.Scan(
			&i.ID,
			&i.CardID,
			&i.DeckID,
			&i.CardCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
