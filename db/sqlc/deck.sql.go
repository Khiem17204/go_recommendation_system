// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: deck.sql

package db

import (
	"context"
)

const createDeck = `-- name: CreateDeck :one
INSERT INTO decks (
    id,
    deck_name,
    rank,
    tournament_id,
    raw_deck_info
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
) RETURNING id, deck_name, rank, tournament_id, raw_deck_info
`

type CreateDeckParams struct {
	ID           int64  `json:"id"`
	DeckName     string `json:"deck_name"`
	Rank         int32  `json:"rank"`
	TournamentID int64  `json:"tournament_id"`
	RawDeckInfo  string `json:"raw_deck_info"`
}

func (q *Queries) CreateDeck(ctx context.Context, arg CreateDeckParams) (Deck, error) {
	row := q.db.QueryRowContext(ctx, createDeck,
		arg.ID,
		arg.DeckName,
		arg.Rank,
		arg.TournamentID,
		arg.RawDeckInfo,
	)
	var i Deck
	err := row.Scan(
		&i.ID,
		&i.DeckName,
		&i.Rank,
		&i.TournamentID,
		&i.RawDeckInfo,
	)
	return i, err
}

const deleteDeck = `-- name: DeleteDeck :exec
DELETE FROM decks
WHERE id = $1
`

func (q *Queries) DeleteDeck(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteDeck, id)
	return err
}

const getDeck = `-- name: GetDeck :one
SELECT id, deck_name, rank, tournament_id, raw_deck_info FROM decks 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDeck(ctx context.Context, id int64) (Deck, error) {
	row := q.db.QueryRowContext(ctx, getDeck, id)
	var i Deck
	err := row.Scan(
		&i.ID,
		&i.DeckName,
		&i.Rank,
		&i.TournamentID,
		&i.RawDeckInfo,
	)
	return i, err
}

const listDecks = `-- name: ListDecks :many
SELECT id, deck_name, rank, tournament_id, raw_deck_info FROM decks
ORDER BY id
LIMIT $1 
OFFSET $2
`

type ListDecksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListDecks(ctx context.Context, arg ListDecksParams) ([]Deck, error) {
	rows, err := q.db.QueryContext(ctx, listDecks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Deck{}
	for rows.Next() {
		var i Deck
		if err := rows.Scan(
			&i.ID,
			&i.DeckName,
			&i.Rank,
			&i.TournamentID,
			&i.RawDeckInfo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
