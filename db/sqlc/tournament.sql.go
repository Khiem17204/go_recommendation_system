// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tournament.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createTournament = `-- name: CreateTournament :one
INSERT INTO tournaments (
    id,
    tournament_name,
    tier,
    player_count,
    event_date,
    format,
    raw_tournament_info
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
) RETURNING id, tournament_name, tier, player_count, event_date, format, raw_tournament_info
`

type CreateTournamentParams struct {
	ID                int64         `json:"id"`
	TournamentName    string        `json:"tournament_name"`
	Tier              int32         `json:"tier"`
	PlayerCount       sql.NullInt32 `json:"player_count"`
	EventDate         time.Time     `json:"event_date"`
	Format            string        `json:"format"`
	RawTournamentInfo string        `json:"raw_tournament_info"`
}

func (q *Queries) CreateTournament(ctx context.Context, arg CreateTournamentParams) (Tournament, error) {
	row := q.db.QueryRowContext(ctx, createTournament,
		arg.ID,
		arg.TournamentName,
		arg.Tier,
		arg.PlayerCount,
		arg.EventDate,
		arg.Format,
		arg.RawTournamentInfo,
	)
	var i Tournament
	err := row.Scan(
		&i.ID,
		&i.TournamentName,
		&i.Tier,
		&i.PlayerCount,
		&i.EventDate,
		&i.Format,
		&i.RawTournamentInfo,
	)
	return i, err
}

const deleteTournament = `-- name: DeleteTournament :exec
DELETE FROM tournaments
WHERE id = $1
`

func (q *Queries) DeleteTournament(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTournament, id)
	return err
}

const getTournament = `-- name: GetTournament :one
SELECT id, tournament_name, tier, player_count, event_date, format, raw_tournament_info FROM tournaments 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTournament(ctx context.Context, id int64) (Tournament, error) {
	row := q.db.QueryRowContext(ctx, getTournament, id)
	var i Tournament
	err := row.Scan(
		&i.ID,
		&i.TournamentName,
		&i.Tier,
		&i.PlayerCount,
		&i.EventDate,
		&i.Format,
		&i.RawTournamentInfo,
	)
	return i, err
}

const listTournaments = `-- name: ListTournaments :many
SELECT id, tournament_name, tier, player_count, event_date, format, raw_tournament_info FROM tournaments
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTournamentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTournaments(ctx context.Context, arg ListTournamentsParams) ([]Tournament, error) {
	rows, err := q.db.QueryContext(ctx, listTournaments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tournament{}
	for rows.Next() {
		var i Tournament
		if err := rows.Scan(
			&i.ID,
			&i.TournamentName,
			&i.Tier,
			&i.PlayerCount,
			&i.EventDate,
			&i.Format,
			&i.RawTournamentInfo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
